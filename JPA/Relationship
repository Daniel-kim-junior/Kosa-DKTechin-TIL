# 연관관계 매핑시 고려사항 3가지 정리

### 다중성
  다대일 : @ManyToOne
  일대다 : @OneToMany
  일대일 : @OneToOne
  다대다 : @ManyToMany - 쓰면 안되는 연관관계

### 단방향, 양방향
  - 테이블
  외래키 하나로 양쪽 조인 가능
  방향이란 개념 X

  - 객체
  참조용 필드가 있는 쪽으로만 참조 가능
  한쪽만 참조하는 단방향
  양쪽이 서로 참조하면 양방향 (단방향이 2개)

### 연관관계의 주인
  테이블은 외래 키 하나로 두 테이블이 연관계를 맺음
  객체 양방향 관계는 A -> B, B -> A 처럼 참조가 2군데
  객체 양방향 관계는 참조가 2군데에서 일어나기 때문에 외래키를 관리해야할
  곳을 Jpa에서는 지정해줘야함
  연관관계의 주인이 외래 키를 관리하는 참조이고
  주인의 반대편은 ReadOnly이다.


### 다대일 단방향
  - Team과 멤버가 있을때 하나의 팀에 여러 멤버가 관계될 수 있으므로
  member에 Team_ID를 외래키를 설정하고 연관관계의 주인은 외래키가 있는 
  member가 된다.(member가 외래키를 관리, 멤버의 팀 객체(외래키를 변경시키는 식으로 관리)
  member -> Team : member의 외래키를 통해 Team을 참조해야만 함    

### 다대일 양방향
  - 테이블에 영향을 주지 않지만 Java 코드로 JPQL 역참조를 위해 Team에
  MemberList를 추가해주는 역참조 매핑

  ***전부 N 쪽에서 외래키를 관리

### 일대다 단방향
  Team이 외래키를 관리하는(코드상에서) 설계
  memberList만 팀에서 가지고 Member를 단방향으로 참조
  Member에는 팀에 대한 정보가 없음

  Update Query가 한번 더 나갈 수 밖 없음
  외래키를 Team에서 관리하지만 실제 외래키를 쓰고 있는 테이블은 Member라서

  객체와 테이블의 차이 때문에 반대편 테이블의 외래 키를 관리하는 특이한 구조

  @JoinColumn을 꼭 사용해야하고 그렇지 않으면 조인 테이블 방식이
  자동으로 적용됨(중간에 테이블 하나 추가함)

  일대다 단방향 매핑의 단점

    - 엔티티가 관리하는 외래 키가 다른 테이블에 있음
    - 연관관계 관리를 위해 추가로 Update SQL 실행
    - 일대다 단방향 매핑보다는 다대일 양방향 매핑을 사용하자
  결론 : 다대일 쓰자...

### 일대일 관계
- 일대일 관계는 그 반대도 일대일
- 주 테이블이나 대상 테이블 중에 외래 키 선택 가능
  - 주 테이블에 외래키
  - 대상 테이블에 외래 키
- 외래 키에 데이터베이스 유니크(UNI) 제약조건 추가하는 것이 관리하기
  좋다

### 주 테이블에 외래 키 단방향
  Member와 ---- >  Locker 관계
  다대일 양방향 매핑처럼 외래키가 있는 곳이 연관관계의 주인
  반대편은 mappedBy 적

### 대상 테이블에 외래 키가 있는 단방향
  단방향 관계는 JPA 지원 X
  양방향 관계는 지원

  일대일 관계에서는 내 엔티티에 있는 외래키는 내 엔티티에서 관리해야한다.

  테이블 설계 관점에서 일대일 관계에서 어떤 테이블에 외래키를 보관해야할까?
  비지니스의 종류에 따라 장기적으로 봤을때 유리한 상황이 다르게 나타날 수 있다.

  Member가 Locker 정보를 가지고 있는게 성능상 유리하기 때문에
  Member가 가지고 있는게 유리할 수 있다.

  하지만 상황에따라 Locker가 외래키를 가지고 있는것이 유리할 수 있다.
  (시간이 흘러 하나의 회원이 여러개의 Locker를 가질 수 있을때?)
  Unique 제약조건만 제거해서 여러개의 Locker Row를 생성할 수 있기 때문에?
  
  TradeOff가 있다.
  
  ```
  정리 :

  - 주 테이블에 외래 키

  주 객체가 대상 객체의 참조를 가지는 것 처럼
  주 테이블에 외래 키를 두고 대상 테이블을 찾음
  객체 지향 개발자가 선호
  JPA 매핑이 편리
  
  장점 : 주 테이블만 조회해도 대상 테이블에 데이터가 있는지 확인 가능
  단점 : 값이 없으면 외래 키에 null 허용해야함

  - 대상 테이블에 외래키
  대상 테이블에 외래키가 존재
  전통적인 데이터베이스 개발자가 선호
  장점 : 주 테이블과 대상 테이블을 일대일에서 일대다 관계로 변경할 때 테이블 구조 유지
  단점 : JPA상 지원불가로 양방향 연관관계를 설정해 외래키를 관리해야함
         프록시 기능의 한계로 지연 로딩으로 설정해도 항상 즉시 로딩
  ```
  


