# 백준 뒤집기

```
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;

public class Main {
   static int dir[][] = {{0, 1}, {0, -1}, {-1, 0} ,{1, 0}};
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int arr[] = Arrays.stream(br.readLine().split(" ")).mapToInt(Integer::parseInt).toArray();

        int n = arr[0];
        int m = arr[1];
        String s;
        char MAP[][] = new char[n][m];
        for(int i = 0; i < n; i++) {
            s = br.readLine();
            for(int j = 0; j < m; j++) {
                MAP[i][j] = s.charAt(j);
            }
        }
        int count = 0;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                for(int k = 0; k < 4; k++) {
                    int nx = i + dir[k][0];
                    int ny = j + dir[k][1];
                    if(nx >= 0 && nx < n && ny >= 0 && ny < m) {
                        if(MAP[nx][ny] != MAP[i][j]) {
                            count++;
                            break;
                        }
                    }

                }
            }
        }


        long rst = solution(m * n - count);
        System.out.println(rst % 1000000007);

    }

    public static long solution(long n) {
        if(n == 1) {
            return 2;
        }

        long rst = solution(n / 2);

        rst = (rst * rst) % 1000000007;


        if(n % 2 == 0) {
            return rst;
        }

        return rst * 2;
    }
}
```




